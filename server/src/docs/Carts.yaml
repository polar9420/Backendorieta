# tags:
#   - name: products
#     description: Todo acerca de los productos
#   - name: carts
#     description: Todo acerca de los carritos
# paths:
#   /api/products:
#     get:
#       tags:
#         - products
#       summary: Obtener todos los productos
#       description: Obtener todos los productos
#       operationId: getAllProducts
#       responses:
#         "200":
#           description: OK
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: "#/components/schemas/Product"
#     post:
#       tags:
#         - products
#       summary: Agregar un producto
#       description: Agregar un producto
#       operationId: addProduct
#       requestBody:
#         content:
#           multipart/form-data:
#             schema:
#               $ref: "#/components/schemas/Product"
#       responses:
#         "200":
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"

#   /api/products/{id}:
#     get:
#       tags:
#         - products
#       summary: Obtener un producto por id
#       description: Obtener un producto por id
#       operationId: getProductById
#       parameters:
#         - name: id
#           in: path
#           required: true
#           description: id del producto
#           schema:
#             type: string
#       responses:
#         "200":
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"
#     patch:
#       tags:
#         - products
#       summary: Actualizar un producto por id
#       description: Actualizar un producto por id
#       operationId: updateProduct
#       parameters:
#         - name: id
#           in: path
#           required: true
#           description: id del producto
#           schema:
#             type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Product"
#       responses:
#         "200":
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"
#     delete:
#       tags:
#         - products
#       summary: Eliminar un producto por id
#       description: Eliminar un producto por id
#       operationId: deleteProduct
#       parameters:
#         - name: id
#           in: path
#           required: true
#           description: id del producto
#           schema:
#             type: string
#       responses:
#         "200":
#           description: OK
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"

# components:
#   schemas:
#     Product:
#       type: object
#       required:
#         - code
#         - category
#         - title
#         - description
#         - price
#         - thumbnail
#         - stock
#         - status
#       properties:
#         code:
#           type: string
#           description: Código del producto
#         category:
#           type: enum
#           enum: [deporte, formal, informal, other]
#           description: Categoría del producto
#         title:
#           type: string
#           description: Título del producto
#         description:
#           type: string
#           description: Descripción del producto
#         price:
#           type: number
#           description: Precio del producto
#         thumbnail:
#           type: string
#           description: Imagen del producto
#         stock:
#           type: number
#           description: Stock del producto
#         status:
#           type: boolean
#           description: Estado del producto
#         owner:
#           type: string
#           description: Dueño del producto
#       example:
#         code: "123456"
#         category: "deporte"
#         title: "Zapatillas"
#         description: "Zapatillas de deporte"
#         price: 100
#         thumbnail: "https://cdn3.iconfinder.com/data/icons/education-209/64/bus-vehicle-transport-school-256.png"
#         stock: 10
#         status: true
#         owner: "admin"

# import { Router } from "express"
# import {
#   addItem,
#   createCart,
#   deleteAllProductsFromCart,
#   deleteProductFromCart,
#   getItems,
#   updateCartProducts,
#   updateProductQuantityInCart,
#   purchaseCart,
# } from "../controllers/cart.controllers.js"
# import { checkRoleAuth } from "../middlewares/auth.js"
# const router = Router()

# router.post("/", checkRoleAuth(["user", "admin", "superadmin"]), createCart)
# router.post("/:cid", checkRoleAuth(["user", "admin", "superadmin"]), addItem)
# router.get("/:cid", checkRoleAuth(["user", "admin", "superadmin"]), getItems)
# router.delete(
#   "/:cid/products/:pid",
#   checkRoleAuth(["user", "admin", "superadmin"]),
#   deleteProductFromCart
# )
# router.delete(
#   "/:cid",
#   checkRoleAuth(["user", "admin", "superadmin"]),
#   deleteAllProductsFromCart
# )
# router.put(
#   "/:cid",
#   checkRoleAuth(["user", "admin", "superadmin"]),
#   updateCartProducts
# )
# router.patch(
#   "/:cid/products/:pid",
#   checkRoleAuth(["user", "admin", "superadmin"]),
#   updateProductQuantityInCart
# )
# router.post(
#   "/:cid/purchase",
#   checkRoleAuth(["user", "admin", "superadmin"]),
#   purchaseCart
# )

# export default router

tags:
  - name: carts
    description: Todo acerca de los carritos
paths:
  /api/cart:
    post:
      tags:
        - carts
      summary: Crear un carrito
      description: Crear un carrito
      operationId: createCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    put:
      tags:
        - carts
      summary: Actualizar los productos del carrito
      description: Actualizar los productos del carrito
      operationId: updateCartProducts
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
  api/cart/{cid}:
    post:
      tags:
        - carts
      summary: Agregar un producto al carrito
      description: Agregar un producto al carrito
      operationId: addItem
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    get:
      tags:
        - carts
      summary: Obtener los productos del carrito
      description: Obtener los productos del carrito
      operationId: getItems
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    delete:
      tags:
        - carts
      summary: Eliminar todos los productos del carrito
      description: Eliminar todos los productos del carrito
      operationId: deleteAllProductsFromCart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
  api/cart/{cid}/products/{pid}:
    delete:
      tags:
        - carts
      summary: Eliminar un producto del carrito
      description: Eliminar un producto del carrito
      operationId: deleteProductFromCart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: id del producto
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    patch:
      tags:
        - carts
      summary: Actualizar la cantidad de un producto del carrito
      description: Actualizar la cantidad de un producto del carrito
      operationId: updateProductQuantityInCart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: id del producto
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
  api/cart/{cid}/purchase:
    post:
      tags:
        - carts
      summary: Comprar el carrito
      description: Comprar el carrito
      operationId: purchaseCart
      parameters:
        - name: cid
          in: path
          required: true
          description: id del carrito
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

#               import mongoose, { Schema } from 'mongoose';
# import mongoosePaginate from 'mongoose-paginate-v2';

# const collectionName = 'carts';

# const cartSchema = Schema({
#   products: [
#     {
#       productId: {
#         type: Schema.Types.ObjectId,
#         ref: 'products',
#         required: true,
#       },
#       quantity: { type: Number, required: true },
#     },
#   ],
# });
# cartSchema.plugin(mongoosePaginate);

# const Cart = mongoose.model(collectionName, cartSchema);

# export default Cart;

components:
  schemas:
    Cart:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: number
      example:
        products:
          - productId: 5f9d88b18d1e9d1c4c0f5b9a
            quantity: 1
          - productId: 5f9d88b18d1e9d1c4c0f5b9b
            quantity: 2
        _id: 5f9d88b18d1e9d1c4c0f5b9c
        __v: 0
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
